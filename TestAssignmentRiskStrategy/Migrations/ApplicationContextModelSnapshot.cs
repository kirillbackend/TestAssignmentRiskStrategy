// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestAssignmentRiskStrategy.Model;

#nullable disable

namespace TestAssignmentRiskStrategy.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TestAssignmentRiskStrategy.Model.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("TestAssignmentRiskStrategy.Model.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CityId1")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("StateId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CityId1");

                    b.HasIndex("StateId1");

                    b.ToTable("Companys");
                });

            modelBuilder.Entity("TestAssignmentRiskStrategy.Model.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("TestAssignmentRiskStrategy.Model.Entities.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Historys");
                });

            modelBuilder.Entity("TestAssignmentRiskStrategy.Model.Entities.Notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("TestAssignmentRiskStrategy.Model.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Statements");
                });

            modelBuilder.Entity("TestAssignmentRiskStrategy.Model.Entities.City", b =>
                {
                    b.HasOne("TestAssignmentRiskStrategy.Model.Entities.State", "State")
                        .WithMany("Cityes")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("TestAssignmentRiskStrategy.Model.Entities.Company", b =>
                {
                    b.HasOne("TestAssignmentRiskStrategy.Model.Entities.City", "City")
                        .WithMany("Company")
                        .HasForeignKey("CityId1");

                    b.HasOne("TestAssignmentRiskStrategy.Model.Entities.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId1");

                    b.Navigation("City");

                    b.Navigation("State");
                });

            modelBuilder.Entity("TestAssignmentRiskStrategy.Model.Entities.Employee", b =>
                {
                    b.HasOne("TestAssignmentRiskStrategy.Model.Entities.Company", "Company")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("TestAssignmentRiskStrategy.Model.Entities.History", b =>
                {
                    b.HasOne("TestAssignmentRiskStrategy.Model.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestAssignmentRiskStrategy.Model.Entities.Company", null)
                        .WithMany("History")
                        .HasForeignKey("CompanyId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("TestAssignmentRiskStrategy.Model.Entities.Notes", b =>
                {
                    b.HasOne("TestAssignmentRiskStrategy.Model.Entities.Company", "Company")
                        .WithMany("Notes")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestAssignmentRiskStrategy.Model.Entities.Employee", "Employee")
                        .WithMany("Notes")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("TestAssignmentRiskStrategy.Model.Entities.City", b =>
                {
                    b.Navigation("Company");
                });

            modelBuilder.Entity("TestAssignmentRiskStrategy.Model.Entities.Company", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("History");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("TestAssignmentRiskStrategy.Model.Entities.Employee", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("TestAssignmentRiskStrategy.Model.Entities.State", b =>
                {
                    b.Navigation("Cityes");
                });
#pragma warning restore 612, 618
        }
    }
}
